name: build

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
env:
  DEBIAN_FRONTEND: noninteractive
  HOMEBREW_NO_AUTO_UPDATE: 1
  LIBGL_ALWAYS_SOFTWARE: 'true'

jobs:
  linux-arm64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-linux-arm64
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-aarch64-linux-gnu libdbus-1-dev:arm64 libgl1-mesa-dev:arm64 liblo-dev:arm64 libx11-dev:arm64 libxcursor-dev:arm64 libxext-dev:arm64 libxrandr-dev:arm64 qemu-user-static
      - name: Install ccache
        run: |
          sudo apt-get install -yqq ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Build extra dependencies
        env:
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh linux-aarch64
      - name: Build linux arm64 cross-compiled
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          pushd deps/PawPaw; source local.env linux-aarch64; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-linux-arm64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.tar.gz -C bin $(ls bin | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-arm64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.tar.gz

  linux-armhf:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-linux-armhf
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture armhf
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-arm-linux-gnueabihf libdbus-1-dev:armhf libgl1-mesa-dev:armhf liblo-dev:armhf libx11-dev:armhf libxcursor-dev:armhf libxext-dev:armhf libxrandr-dev:armhf qemu-user-static
      - name: Install ccache
        run: |
          sudo apt-get install -yqq ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Build extra dependencies
        env:
          PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh linux-armhf
      - name: Build linux armhf cross-compiled
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          pushd deps/PawPaw; source local.env linux-armhf; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-linux-armhf-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.tar.gz -C bin $(ls bin | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-armhf-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.tar.gz

  linux-i686:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-linux-i686
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-i686-linux-gnu libdbus-1-dev:i386 libgl1-mesa-dev:i386 liblo-dev:i386 libx11-dev:i386 libxcursor-dev:i386 libxext-dev:i386 libxrandr-dev:i386
      - name: Install ccache
        run: |
          sudo apt-get install -yqq ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Build extra dependencies
        env:
          PKG_CONFIG_PATH: /usr/lib/i386-linux-gnu/pkgconfig
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh linux-i686
      - name: Build linux i686
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          pushd deps/PawPaw; source local.env linux-i686; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-linux-i686-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.tar.gz -C bin $(ls bin | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-i686-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.tar.gz

  linux-x86_64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-linux-x86_64
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq libdbus-1-dev libgl1-mesa-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
      - name: Install ccache
        run: |
          sudo apt-get install -yqq ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Build extra dependencies
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh linux
      - name: Build linux x86_64
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          pushd deps/PawPaw; source local.env linux; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-linux-x86_64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.tar.gz -C bin $(ls bin | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-x86_64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.tar.gz

  linux-x86_64-debug:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq libgl1-mesa-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
      - name: Build linux x86_64 (debug)
        env:
          LDFLAGS: -static-libgcc -static-libstdc++
        run: |
          make features
          make DEBUG=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-linux-x86_64-debug-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.tar.gz -C bin $(ls bin | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-x86_64-debug-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.tar.gz

  linux-x86_64-headless:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq libgl1-mesa-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
      - name: Build linux x86_64 (headless)
        run: |
          make features
          make HEADLESS=true -j $(nproc)

  linux-x86_64-sysdeps:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq libgl1-mesa-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev libarchive-dev libjansson-dev libsamplerate0-dev libspeexdsp-dev
      - name: Build linux x86_64 (sysdeps)
        run: |
          make features
          make SYSDEPS=true -j $(nproc)

  macos-universal:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-win32
      - name: Install ccache
        run: |
          brew install ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Fix up Xcode
        run: |
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
          sudo xcode-select -s "/Applications/Xcode_12.3.app"
      - name: Build extra dependencies
        run: |
          export PATH="/usr/local/opt/ccache/libexec:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh macos-universal
      - name: Build macOS universal
        run: |
          export PATH="/usr/local/opt/ccache/libexec:${PATH}"
          pushd deps/PawPaw; source local.env macos-universal; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(sysctl -n hw.logicalcpu)
          ./dpf/utils/package-osx-bundles.sh
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-macOS-universal-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *-macOS.pkg

  win32:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-win32
      - name: Set up dependencies
        run: |
          sudo add-apt-repository -y ppa:cybermax-dexter/mingw-w64-backport
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq binutils-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64 wine-stable:i386
      - name: Install ccache
        run: |
          sudo apt-get install -yqq ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Build extra dependencies
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh win32
      - name: Build win32 cross-compiled
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          pushd deps/PawPaw; source local.env win32; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          cd bin; zip -r -9 ../${{ github.event.repository.name }}-win32-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.zip $(ls | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-win32-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.zip

  win64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ccache
        uses: actions/cache@v2
        with:
          path: |
            ${HOME}/.cache
            ${HOME}/PawPawBuilds/builds
            ${HOME}/PawPawBuilds/downloads
            ${HOME}/PawPawBuilds/targets
          key: ccache-win64
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 mingw-w64 wine-stable
      - name: Install ccache
        run: |
          sudo apt-get install -yqq ccache
          ccache --set-config=cache_dir=${HOME}/.cache
          ccache --set-config=compression=true
      - name: Build extra dependencies
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          ./deps/PawPaw/bootstrap-cardinal.sh win64
      - name: Build win64 cross-compiled
        run: |
          export PATH="/usr/lib/ccache:${PATH}"
          pushd deps/PawPaw; source local.env win64; popd
          make features
          make NOOPT=true WITH_LTO=true WITH_PAWPAW=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Pack binaries
        run: |
          cd bin; zip -r -9 ../${{ github.event.repository.name }}-win64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}.zip $(ls | grep -e lv2 -e vst)
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-win64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *.zip

  plugin-validation:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up dependencies
        run: |
          # custom repos
          wget https://launchpad.net/~kxstudio-debian/+archive/kxstudio/+files/kxstudio-repos_10.0.3_all.deb
          sudo dpkg -i kxstudio-repos_10.0.3_all.deb
          sudo apt-get update -qq
          # build-deps
          sudo apt-get install -yqq libgl1-mesa-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
          # runtime testing
          sudo apt-get install -yqq carla-git lilv-utils lv2-dev lv2lint valgrind
      - name: Build plugins
        env:
          CFLAGS: -g
          CXXFLAGS: -g -DDPF_ABORT_ON_ERROR
          LDFLAGS: -static-libgcc -static-libstdc++
        run: |
          make features
          make NOOPT=true SKIP_STRIPPING=true -j $(nproc)
      - name: Validate LV2 ttl syntax
        run: |
          lv2_validate \
              /usr/lib/lv2/mod.lv2/*.ttl \
              /usr/lib/lv2/kx-meta/*.ttl \
              /usr/lib/lv2/kx-control-input-port-change-request.lv2/*.ttl \
              /usr/lib/lv2/kx-programs.lv2/*.ttl \
              ./bin/*.lv2/*.ttl
      #- name: Validate LV2 metadata and binaries
        #run: |
          #export LV2_PATH=/tmp/lv2-path
          #mkdir ${LV2_PATH}
          #cp -r bin/*.lv2 \
              #/usr/lib/lv2/{atom,buf-size,core,data-access,kx-control-input-port-change-request,kx-programs,instance-access,midi,parameters,port-groups,port-props,options,patch,presets,resize-port,state,time,ui,units,urid,worker}.lv2 \
              #${LV2_PATH}
          #lv2lint -s lv2_generate_ttl -l ld-linux-x86-64.so.2 -M nopack $(lv2ls)
      - name: Test LV2 plugin
        run: |
            export LV2_PATH=/tmp/lv2-path
            for p in $(lv2ls); do \
                env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                    valgrind \
                    --error-exitcode=255 \
                    --leak-check=no \
                    --track-origins=yes \
                    --suppressions=./dpf/utils/valgrind-dpf.supp \
                    /usr/lib/carla/carla-bridge-native lv2 "" ${p} 1>/dev/null; \
            done
      # - name: Test VST2 plugin
      #   env:
      #     CARLA_DO_NOT_USE_JUCE_FOR_VST2: 1
      #   run: |
      #       for p in $(ls bin/*.vst/*.so); do \
      #           env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
      #               valgrind \
      #               --error-exitcode=255 \
      #               --leak-check=no \
      #               --track-origins=yes \
      #               --suppressions=./dpf/utils/valgrind-dpf.supp \
      #               /usr/lib/carla/carla-bridge-native vst2 ./${p} "" 1>/dev/null; \
      #       done
      # - name: Test VST3 plugin
      #   run: |
      #       for p in $(ls bin/ | grep vst3); do \
      #           env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
      #               valgrind \
      #               --error-exitcode=255 \
      #               --leak-check=no \
      #               --track-origins=yes \
      #               --suppressions=./dpf/utils/valgrind-dpf.supp \
      #               /usr/lib/carla/carla-bridge-native vst3 ./bin/${p} "" 1>/dev/null; \
      #       done
